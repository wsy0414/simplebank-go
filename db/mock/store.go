// Code generated by MockGen. DO NOT EDIT.
// Source: simplebank/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	sqlc "simplebank/db/sqlc"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockStore) AddBalance(arg0 context.Context, arg1 sqlc.AddBalanceParams) (sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStoreMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStore)(nil).AddBalance), arg0, arg1)
}

// CreateActivity mocks base method.
func (m *MockStore) CreateActivity(arg0 context.Context, arg1 sqlc.CreateActivityParams) (sqlc.ActivityLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", arg0, arg1)
	ret0, _ := ret[0].(sqlc.ActivityLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockStoreMockRecorder) CreateActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockStore)(nil).CreateActivity), arg0, arg1)
}

// CreateBalance mocks base method.
func (m *MockStore) CreateBalance(arg0 context.Context, arg1 sqlc.CreateBalanceParams) (sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockStoreMockRecorder) CreateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockStore)(nil).CreateBalance), arg0, arg1)
}

// CreateTransferLog mocks base method.
func (m *MockStore) CreateTransferLog(arg0 context.Context, arg1 sqlc.CreateTransferLogParams) (sqlc.TransferLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferLog", arg0, arg1)
	ret0, _ := ret[0].(sqlc.TransferLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransferLog indicates an expected call of CreateTransferLog.
func (mr *MockStoreMockRecorder) CreateTransferLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferLog", reflect.TypeOf((*MockStore)(nil).CreateTransferLog), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetActivity mocks base method.
func (m *MockStore) GetActivity(arg0 context.Context, arg1 int32) ([]sqlc.ActivityLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivity", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.ActivityLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivity indicates an expected call of GetActivity.
func (mr *MockStoreMockRecorder) GetActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivity", reflect.TypeOf((*MockStore)(nil).GetActivity), arg0, arg1)
}

// GetBalanceByUser mocks base method.
func (m *MockStore) GetBalanceByUser(arg0 context.Context, arg1 int32) ([]sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUser indicates an expected call of GetBalanceByUser.
func (mr *MockStoreMockRecorder) GetBalanceByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUser", reflect.TypeOf((*MockStore)(nil).GetBalanceByUser), arg0, arg1)
}

// GetSpecifyCurrencyBalanceByUser mocks base method.
func (m *MockStore) GetSpecifyCurrencyBalanceByUser(arg0 context.Context, arg1 sqlc.GetSpecifyCurrencyBalanceByUserParams) (sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecifyCurrencyBalanceByUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecifyCurrencyBalanceByUser indicates an expected call of GetSpecifyCurrencyBalanceByUser.
func (mr *MockStoreMockRecorder) GetSpecifyCurrencyBalanceByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecifyCurrencyBalanceByUser", reflect.TypeOf((*MockStore)(nil).GetSpecifyCurrencyBalanceByUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int32) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByName mocks base method.
func (m *MockStore) GetUserByName(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockStoreMockRecorder) GetUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockStore)(nil).GetUserByName), arg0, arg1)
}

// InserOrUpdateBalance mocks base method.
func (m *MockStore) InserOrUpdateBalance(arg0 context.Context, arg1 sqlc.InserOrUpdateBalanceParams) (sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserOrUpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InserOrUpdateBalance indicates an expected call of InserOrUpdateBalance.
func (mr *MockStoreMockRecorder) InserOrUpdateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserOrUpdateBalance", reflect.TypeOf((*MockStore)(nil).InserOrUpdateBalance), arg0, arg1)
}

// SubBalance mocks base method.
func (m *MockStore) SubBalance(arg0 context.Context, arg1 sqlc.SubBalanceParams) (sqlc.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockStoreMockRecorder) SubBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockStore)(nil).SubBalance), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 sqlc.TransferTxParam) (sqlc.TransferTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc.TransferTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}
